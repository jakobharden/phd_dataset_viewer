## Plot specimen temperature measurement data#### FUNCTION SYNOPSIS:#### Usage 1: [r_fh, r_ah, r_ph] = dsviewer_tem(p_fp, p_ss, p_cn)##                                 non-interactive mode#### Usage 3: [r_fh, r_ah, r_ph] = dsviewer_tem(p_fp, p_ss, [])##          [r_fh, r_ah, r_ph] = dsviewer_tem(p_fp, p_ss)##                                 interactive mode##                                 show temperature channel selection dialogue, GUI#### Usage 2: [r_fh, r_ah, r_ph] = dsviewer_tem(p_fp, [], p_cn)##                                 non-interactive mode##                                 load default property settings (see dsviewer_plotprops.m)#### Usage 4: [r_fh, r_ah, r_ph] = dsviewer_tem([], p_ss, p_cn)##                                 interactive mode##                                 show dataset file selection dialogue, GUI#### p_fp ... full qualified file path to dataset file, optional, <str>## p_ss ... plot property data structure, optional, <struct>## p_cn ... temperature channel number, optional, <uint>##            1: channel T1, specimen, center##            2: channel T2, specimen, next to sensor##            3: channel T3, specimen, lateral##            4: channel T4, outside, air##            5: channel T1 to T3, specimen temperature recordings##            6: channel T1 to T4, all temperature recordings## r_fh ... return: figure object handle, <int>## r_ah ... return: axes object handle, <dbl>## r_ph ... return: plot object handle(s), <dbl> or [<dbl>]#### see also: dsviewer_settings.m, tool_gui_dsload.m, tool_gui_seltem.m, tool_get_maturity.m, tool_get_dscode.m, tool_create_figure.m,##           tool_create_axes.m#### Copyright 2023 Jakob Harden (jakob.harden@tugraz.at, Graz University of Technology, Graz, Austria)## License: MIT## This file is part of the PhD thesis of Jakob Harden.## ## Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated ## documentation files (the “Software”), to deal in the Software without restriction, including without ## limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of ## the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:## ## THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ## THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE ## AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, ## TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.##function [r_fh, r_ah, r_ph] = dsviewer_tem(p_fp, p_ss, p_cn)    ## check arguments  if (nargin < 1)    p_fp = [];  endif  if (nargin < 2)    p_ss = [];  endif  if (nargin < 3)    p_cn = [];  endif    ## set default values  if isempty(p_ss)    p_ss = dsviewer_settings();  endif    ## load dataset  ds = tool_gui_dsload(p_fp);    ## check dataset  if not(isfield(ds, 'tst'))    error('Dataset does not contain any test data! Substructure "tst" not available.');  endif  if not(isfield(ds.tst, 's08'))    printf('Dataset does not contain any specimen temperature tests! Substructure "tst.s08" not available.\n');    return;  endif  if isempty(ds.tst.s08)    printf('Dataset does not contain specimen temperature measurements. Substructure "tst.s08" is empty.\n');    return;  endif    ## select temperature channel  cn = tool_gui_seltem(p_cn);    ## temperature channel names  cnames = {"T1 (center)", "T2 (sensor)", "T3 (lateral)", "T4 (air)", "T1,T2,T3 (specimen)", "T1,T2,T3,T4 (all)"};    ## update plot properties  [p_ss.temp.dscode, p_ss.temp.dscodeplt] = tool_get_dscode(ds);    ## get maturity time array  tem_cn = 2; # temperature measurements are performed in mould 2 (shear wave, transversal)  xx = tool_get_maturity(ds, tem_cn, 'min');    ## create figure object  r_fh = tool_create_figure(p_ss, 'Temperature plot', 'show');    ## create axes object  r_ah = tool_create_axes(r_fh, p_ss, cn, 'axes', 'tem');    ## plot temperature data  hold(r_ah, 'on');
  switch (cn)    case 1    ## plot channel 1    yy = ds.tst.s08.d03.v;    r_ph = plot(r_ah, xx, yy, sprintf(";%s;", cnames{1}), 'linewidth', p_ss.tem.lwid(cn), 'color', p_ss.tem.lcol(cn, :));  case 2    ## plot channel 2    yy = ds.tst.s08.d04.v;    r_ph = plot(r_ah, xx, yy, sprintf(";%s;", cnames{2}), 'linewidth', p_ss.tem.lwid(cn), 'color', p_ss.tem.lcol(cn, :));  case 3    ## plot channel 3    yy = ds.tst.s08.d05.v;    r_ph = plot(r_ah, xx, yy, sprintf(";%s;", cnames{3}), 'linewidth', p_ss.tem.lwid(cn), 'color', p_ss.tem.lcol(cn, :));  case 4    ## plot channel 4    yy = ds.tst.s08.d06.v;    r_ph = plot(r_ah, xx, yy, sprintf(";%s;", cnames{4}), 'linewidth', p_ss.tem.lwid(cn), 'color', p_ss.tem.lcol(cn, :));  case 5    ## plot channel 1 to 3    r_ph = zeros(1, 3);    yy = ds.tst.s08.d03.v;    r_ph(1) = plot(r_ah, xx, yy, sprintf(";%s;", cnames{1}), 'linewidth', p_ss.tem.lwid(1), 'color', p_ss.tem.lcol(1, :));    yy = ds.tst.s08.d04.v;    r_ph(2) = plot(r_ah, xx, yy, sprintf(";%s;", cnames{2}), 'linewidth', p_ss.tem.lwid(2), 'color', p_ss.tem.lcol(2, :));    yy = ds.tst.s08.d05.v;    r_ph(3) = plot(r_ah, xx, yy, sprintf(";%s;", cnames{3}), 'linewidth', p_ss.tem.lwid(3), 'color', p_ss.tem.lcol(3, :));  case 6    ## plot channel 1 to 4    r_ph = zeros(1, 4);    yy = ds.tst.s08.d03.v;    r_ph(1) = plot(r_ah, xx, yy, sprintf(";%s;", cnames{1}), 'linewidth', p_ss.tem.lwid(1), 'color', p_ss.tem.lcol(1, :));    yy = ds.tst.s08.d04.v;    r_ph(2) = plot(r_ah, xx, yy, sprintf(";%s;", cnames{2}), 'linewidth', p_ss.tem.lwid(2), 'color', p_ss.tem.lcol(2, :));    yy = ds.tst.s08.d05.v;    r_ph(3) = plot(r_ah, xx, yy, sprintf(";%s;", cnames{3}), 'linewidth', p_ss.tem.lwid(3), 'color', p_ss.tem.lcol(3, :));    yy = ds.tst.s08.d06.v;    r_ph(4) = plot(r_ah, xx, yy, sprintf(";%s;", cnames{4}), 'linewidth', p_ss.tem.lwid(4), 'color', p_ss.tem.lcol(4, :));  otherwise    help dsviewer_tem;    error('Temperature channel selection %d is not defined!', cn);  endswitch  title(r_ah, sprintf('%s - %s', p_ss.temp.dscodeplt, cnames{cn}));  xlabel(r_ah, p_ss.tem.xlbl);  ylabel(r_ah, p_ss.tem.ylbl);  hold(r_ah, 'off');  endfunction