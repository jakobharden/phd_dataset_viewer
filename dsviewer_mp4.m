## Plot/Render signal data to MP4 video file#### FUNCTION SYNOPSIS:#### Usage 1: [r_fp] = dsviewer_mp4(p_fp, p_tp, p_ss, p_om)##                     non-interactive mode#### Usage 2: [r_fp] = dsviewer_mp4(p_fp, p_tp, p_ss, [])##          [r_fp] = dsviewer_mp4(p_fp, p_tp, p_ss)##                     interactive mode##                     show MP4 video output mode dialogue, GUI#### Usage 3: [r_fp] = dsviewer_mp4(p_fp, p_tp, [], p_om)##                     non-interactive mode##                     load default plot/rendering settings (see also: dsviewer_settings.m)#### Usage 4: [r_fp] = dsviewer_mp4(p_fp, [], p_ss, p_om)##                     non-interactive mode##                     use fallback value for temporary directory (see also: dsviewer_settings.m)#### Usage 5: [r_fp] = dsviewer_mp4([], p_tp, p_ss, p_om)##                     interactive mode##                     show dataset file selection dialogue, GUI#### p_fp ... full qualified file path to dataset, optional, <str>## p_tp ... full qualified directory path to temporary directory, optional, see also notes #2, <str>## p_ss ... settings data structure, optional, <struct_dsviewer_settings>## p_om ... MP4 video output mode, optional, <uint>##            1: combine signals from compression- and shear wave measurement##            2: stack signals from compression- and shear wave measurement##            3: render compression wave signal only##            4: render shear wave signal only##            5: render compression wave signals to separate files (subsequent execution of output mode 3 and 4)## r_fp ... return: MP4 video output file path, <str>#### Notes:## 1) As a prerequisite, you need to install "ffmpeg" on your operating system.##    bash: $ sudo apt-get install ffmpeg##    See also: https://ffmpeg.org/## 2) To speed up the rendering process, it is highly recommended to use a ramdisk (ramfs) as temporary directory to store the rendered frames.##    If no directory is specified, the script is looking whether the directory "/mnt/ramdisk" exists or not.##    If this is the case, it is used as temporary directory.##    Otherwise, the fallback directory "./plot/tmp" is used. That leads to SLOW rendering of the video file!##    See also: https://linuxhint.com/create-ramdisk-linux/#### see also: tool_gui_dsload.m, tool_gui_selmp4om.m, tool_get_dscode.m, tool_get_ptslen.m, tool_get_maturity,##           tool_get_timesig.m, tool_get_magnitude.m, tool_create_figure.m, tool_create_axes.m, tool_create_plot2d.m, ##           tool_get_mp4ulim.m, tool_update_plot2d.m, imwrite, getframe#### Copyright 2023 Jakob Harden (jakob.harden@tugraz.at, Graz University of Technology, Graz, Austria)## License: MIT## This file is part of the PhD thesis of Jakob Harden.## ## Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated ## documentation files (the “Software”), to deal in the Software without restriction, including without ## limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of ## the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:## ## THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ## THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE ## AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, ## TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.##function [r_fp] = dsviewer_mp4(p_fp, p_tp, p_ss, p_om)    ## check arguments  if (nargin < 4)    p_om = [];  endif  if (nargin < 3)    p_ss = [];  endif
  if (nargin < 2)    p_tp = [];  endif  if (nargin < 1)    p_fp = [];  endif    ## set defaults
  if isempty(p_ss)    p_ss = dsviewer_settings();  endif
  if isempty(p_tp)    if (exist(p_ss.mp4.tmpdir_rd, 'dir') == 7)      ## ramdisk is available (fast!)      p_tp = p_ss.mp4.tmpdir_rd;    else      ## fall back to local directory (slow!)      p_tp = p_ss.mp4.tmpdir_fb;    endif    printf('Using temporary directory: %s\n', p_tp);  endif  p_ss.mp4.tmpdir = p_tp;
    ## create/check temporary directory used to store the frames  if not(exist(p_ss.mp4.tmpdir, 'dir') == 7)    printf('Temporary directory does not exist. Trying to create temporary directory: %s\n', p_ss.mp4.tmpdir);    mkdir(p_ss.mp4.tmpdir);    if not(exist(p_ss.mp4.tmpdir, 'dir') == 7)      help dsviewer_mp4;      error('Could not create temporary directory %s! Exit.', p_ss.mp4.tmpdir);    endif  endif    ## load dataset  ds = tool_gui_dsload(p_fp);    ## select output mode  om = tool_gui_selmp4om(p_om);    ## update settings  [p_ss.temp.dscode, p_ss.temp.dscodeplt] = tool_get_dscode(ds);  p_ss.ptslen = tool_get_ptslen(ds);  p_ss.mp4.meta_title = p_ss.temp.dscode;  p_ss.mp4.meta_album = ds.meta_ser.a02.v;  p_ss.mp4.meta_grouping = ds.meta_ser.a01.v;  p_ss.mp4.meta_track = sprintf('%d', ds.meta_set.d01.v);    ## create list of output file paths for mode 1 to 4  op_list = {...    sprintf('./%s_%s.mp4', p_ss.temp.dscode, p_ss.mp4.ofsfx{1}),    sprintf('./%s_%s.mp4', p_ss.temp.dscode, p_ss.mp4.ofsfx{2}),    sprintf('./%s_%s.mp4', p_ss.temp.dscode, p_ss.mp4.ofsfx{3}),    sprintf('./%s_%s.mp4', p_ss.temp.dscode, p_ss.mp4.ofsfx{4})  };    ## switch output mode, render MP4 video  switch (om)    case 1      ## render compression & shear wave      ## combine graphs      ## 1 output file      p_ss.outpath = op_list{1};      hlp_plot0(p_ss, ds.tst.s06, ds.tst.s07);    case 2      ## render compression & shear wave      ## stack graphs      ## 1 output file      p_ss.outpath = op_list{2};      hlp_plot1(p_ss, ds.tst.s06, ds.tst.s07);    case 3      ## render compression wave      ## 1 graph      ## 1 output file      p_ss.outpath = op_list{3};      hlp_plot2(p_ss, ds.tst.s06, 1);    case 4      ## render shear wave      ## 1 graph      ## 1 output file      p_ss.outpath = op_list{4};      hlp_plot2(p_ss, ds.tst.s07, 2);    case 5      ## render compression & shear wave      ## 1 graph per file      ## 2 output files      p_ss.outpath = op_list{3};      hlp_plot2(p_ss, ds.tst.s06, 1);      p_ss.outpath = op_list{4};      hlp_plot2(p_ss, ds.tst.s07, 2);    otherwise      ## render compression & shear wave      ## combined graphs      ## 1 output file      p_ss.outpath = op_list{1};      hlp_plot0(p_ss, ds.tst.s06, ds.tst.s07);  endswitch  endfunctionfunction hlp_create_mp4(p_ss)  ## Create MP4 video file using the frames in the temporary directory  ##  ## p_ss ... settings data structure, <struct_dsviewer_settings>    ## get system command (ffmpeg)  cmd1 = 'ffmpeg';  cmd2 = sprintf('-r %d', p_ss.mp4.frate);  cmd3 = sprintf('-i %s/img%%03d.png', p_ss.mp4.tmpdir);  cmd4 = sprintf('-metadata title="%s"', p_ss.mp4.meta_title);  cmd5 = sprintf('-metadata author="%s"', p_ss.mp4.meta_author);  cmd6 = sprintf('-metadata album_artist="%s"', p_ss.mp4.meta_album_artist);  cmd7 = sprintf('-metadata artist="%s"', p_ss.mp4.meta_artist);  cmd8 = sprintf('-metadata album="%s"', p_ss.mp4.meta_album);  cmd9 = sprintf('-metadata grouping="%s"', p_ss.mp4.meta_grouping);  cmd10 = sprintf('-metadata composer="%s"', p_ss.mp4.meta_composer);  cmd11 = sprintf('-metadata date="%s"', p_ss.mp4.meta_date);  cmd12 = sprintf('-metadata track="%s"', p_ss.mp4.meta_track);  cmd13 = sprintf('-metadata comment="%s"', p_ss.mp4.meta_comment);  cmd14 = sprintf('-metadata genre="%s"', p_ss.mp4.meta_genre);  cmd15 = sprintf('-metadata copyright="%s"', p_ss.mp4.meta_copyright);  cmd16 = sprintf('-metadata description="%s"', p_ss.mp4.meta_description);  cmd17 = sprintf('-metadata synopsis="%s"', p_ss.mp4.meta_synopsis);  cmd18 = sprintf('-metadata show="%s"', p_ss.mp4.meta_show);  cmd19 = sprintf('-metadata episode_id="%s"', p_ss.mp4.meta_episode_id);  cmd20 = sprintf('-metadata network="%s"', p_ss.mp4.meta_network);  cmd21 = sprintf('-metadata lyrics="%s"', p_ss.mp4.meta_lyrics);  cmd22 = sprintf('-metadata cprt="%s"', p_ss.mp4.meta_copyright);  cmd23 = sprintf('-metadata publisher="%s"', p_ss.mp4.meta_network);  cmd24 = sprintf('-vcodec %s', 'libx264');  cmd25 = sprintf('-vf scale=%d:-1', p_ss.mp4.fwidth);  cmd26 = p_ss.outpath;  cmd = cstrcat(cmd1, ' ', cmd2, ' ', cmd3, ' ', cmd4, ' ', cmd5, ' ', cmd6, ' ', cmd7, ' ', cmd8, ' ', cmd9, ' ', cmd10, ...  ' ', cmd11, ' ', cmd12, ' ', cmd13, ' ', cmd14, ' ', cmd15, ' ', cmd16, ' ', cmd17, ' ', cmd18, ' ', cmd19, ' ', cmd20, ' ', cmd21, ...  ' ', cmd22, ' ', cmd23, ' ', cmd24, ' ', cmd25, ' ', cmd26);    ## run system command (create MP4 video file)  system(cmd);    ## remove temporary directory and contained files  delete(fullfile(p_ss.mp4.tmpdir, 'img*.png'));  rmdir(p_ss.mp4.tmpdir);  endfunctionfunction [r_lim] = hlp_ylim(p_ss, p_m1, p_m2)  ## Get y axis limits for signal(s)  ## Note: Skip pre-trigger section (PTS) and the electromagnetic response section (ERS).  ##       Thus, the disturbance in ERS does not affect the y axis limits.  ##  ## p_ss  ... plot property data structure, <struct>  ## p_m1  ... signal 1 (compression wave or shear wave), [<dbl>]  ## p_m2  ... signal 2 (shear wave), optional, [<dbl>]  ## r_lim ... return: y axis limits [1 x 2], [<dbl>]    if (nargin < 3)    ## single plot, compression- or shear wave signal    i0 = p_ss.ptslen(1) + p_ss.erslen(1) - 1;    vmax = max(abs(p_m1(i0 : end)));  else    ## combined plot, compression- and shear wave signals in one graph    ## skip sample range between i01 and i02    i01 = p_ss.ptslen(1) + p_ss.erslen(1) - 1;    i02 = p_ss.ptslen(2) + p_ss.erslen(2) - 1;    vmax1 = max(abs(p_m1(i01 : end)));    vmax2 = max(abs(p_m2(i02 : end)));    vmax = max([vmax1, vmax2]);  endif    r_lim = [-vmax, vmax] * 1.05;  endfunctionfunction hlp_plot0(p_ss, p_d1, p_d2)  ## Plot frame, combined plot, compression- and shear wave signal in one graph  ##  ## p_ss ... settings data structure, <struct_dsviewer_settings>  ## p_d1 ... ultrasonic pulse transmission test data structure, channel 1, compression wave signals, <struct_test_utt>  ## p_d2 ... ultrasonic pulse transmission test data structure, channel 2, shear wave signals, <struct_test_utt>    ## number of samples  nsmp = size(p_d1.d13.v, 1);    ## number of signals  nsig = size(p_d1.d13.v, 2);    ## maturity time array, part of plot title  mm = tool_get_maturity(p_d1, 0, 'min');    ## sample time signature array, x axis  xx = tool_get_timesig(p_d1, 0, 'usec');    ## get upper sample index limits  ul1 = tool_get_mp4ulim(p_d1, 0, p_ss.mp4.ulim_nsig, p_ss.mp4.ulim_thf, p_ss.mp4.ulim_fltwinsize, p_ss.mp4.ulim_extsize);  ul2 = tool_get_mp4ulim(p_d2, 0, p_ss.mp4.ulim_nsig, p_ss.mp4.ulim_thf, p_ss.mp4.ulim_fltwinsize, p_ss.mp4.ulim_extsize);  ulim = max([ul1, ul2], [], 2);    ## print status  printf('Rendering frames: ');    ## create figure, hidden  fh = tool_create_figure(p_ss, [], 'hide');    ## render frames  for i = 1 : nsig    ## y coordinates, signals    yy1 = tool_get_magnitude(p_d1, 0, 'volts', i);    yy2 = tool_get_magnitude(p_d2, 0, 'volts', i);    if (i == 1)      ## create axes object      ah = tool_create_axes(fh, p_ss, 1, 'axes', '2d');      ## create plot objects      hold(ah, 'on');      ph1 = tool_create_plot2d(ah, p_ss, 1, xx, yy1);      ph2 = tool_create_plot2d(ah, p_ss, 2, xx, yy2);      hold(ah, 'off');      ## axis labels      xlabel(p_ss.p2d.xlbl);      ylabel(p_ss.p2d.ylbl);      ## grid      if (p_ss.p2d.gridon)        grid on;      endif    else      ## update y coordinates      tool_update_plot2d(ph1, [], yy1);      tool_update_plot2d(ph2, [], yy2);    endif    ## update axis limits    ylim(ah, hlp_ylim(p_ss, yy1, yy2));    xlim(ah, xx([p_ss.ptslen(3), ulim(i)]));    ## update plot title    tit = sprintf('%s: maturity = %d [min], index = %d', p_ss.temp.dscodeplt, mm(i), i);    title(ah, tit);    ## write image    tmp_fn = fullfile(p_ss.mp4.tmpdir, sprintf('img%03d.png', i - 1));    imwrite(getframe(fh).cdata, tmp_fn);    ## print status    if (i < nsig)      printf('.');    else      printf('. (%d frames)\n', nsig);    endif  endfor    # close figure  close(fh);    # create MP4 file from images  hlp_create_mp4(p_ss);  endfunctionfunction hlp_plot1(p_ss, p_d1, p_d2)  ## Plot frame, stacked plot, compression- and shear wave signal in separate graphs  ##  ## p_ss ... settings data structure, <struct_dsviewer_settings>  ## p_d1 ... ultrasonic pulse transmission test data structure, channel 1, compression wave signals, <struct>  ## p_d2 ... ultrasonic pulse transmission test data structure, channel 2, shear wave signals, <struct>    ## number of samples  nsmp = size(p_d1.d13.v, 1);    ## number of signals  nsig = size(p_d1.d13.v, 2);    ## maturity, plot title  mm = tool_get_maturity(p_d1, 0, 'min');    ## sample time signature, x axis  xx = tool_get_timesig(p_d1, 0, 'usec');    ## get upper sample index limits  ul1 = tool_get_mp4ulim(p_d1, 0, p_ss.mp4.ulim_nsig, p_ss.mp4.ulim_thf, p_ss.mp4.ulim_fltwinsize, p_ss.mp4.ulim_extsize);  ul2 = tool_get_mp4ulim(p_d2, 0, p_ss.mp4.ulim_nsig, p_ss.mp4.ulim_thf, p_ss.mp4.ulim_fltwinsize, p_ss.mp4.ulim_extsize);    ## print status  printf('Rendering frames: ');    ## create figure, hidden  fh = tool_create_figure(p_ss, [], 'hide');    ## render frames  for i = 1 : nsig    ## y coordinates, signals    yy1 = tool_get_magnitude(p_d1, 0, 'volts', i);    yy2 = tool_get_magnitude(p_d2, 0, 'volts', i);    if (i == 1)      ## create top subplot object, channel 1      ah1 = tool_create_axes(fh, p_ss, 1, 'subplot', '2d');      ## create top plot, channel 1      ph1 = tool_create_plot2d(ah1, p_ss, 1, xx, yy1);      ## axis labels      xlabel(p_ss.p2d.xlbl);      ylabel(p_ss.p2d.ylbl);      ## grid      if (p_ss.p2d.gridon)        grid on;      endif      ## create bottom subplot object, channel 2      ah2 = tool_create_axes(fh, p_ss, 2, 'subplot', '2d');      ## create bottom plot, channel 2      ph2 = tool_create_plot2d(ah2, p_ss, 2, xx, yy2);      ## axis labels      xlabel(p_ss.p2d.xlbl);      ylabel(p_ss.p2d.ylbl);      ## grid      if (p_ss.p2d.gridon)        grid on;      endif    else      ## update y coordinates      tool_update_plot2d(ph1, [], yy1);      tool_update_plot2d(ph2, [], yy2);    endif    ## update axis limits    ylim(ah1, hlp_ylim(p_ss, yy1));    ylim(ah2, hlp_ylim(p_ss, yy2));    xlim(ah1, xx([p_ss.ptslen(1), ul1(i)]));    xlim(ah2, xx([p_ss.ptslen(2), ul2(i)]));    ## update plot title    tit = sprintf('%s: maturity = %d [min], index = %d', p_ss.temp.dscodeplt, mm(i), i);    title(ah1, tit);    title(ah2, tit);    # write image    tmp_fn = fullfile(p_ss.mp4.tmpdir, sprintf('img%03d.png', i - 1));    imwrite(getframe(fh).cdata, tmp_fn);    ## print status    if (i < nsig)      printf('.');    else      printf('. (%d frames)\n', nsig);    endif  endfor    # close figure  close(fh);    # create MP4 file from images  hlp_create_mp4(p_ss);  endfunctionfunction hlp_plot2(p_ss, p_ds, p_cn)  ## Plot frame, single plot, compression- or shear wave signal  ##  ## p_ss ... settings data structure, <struct_dsviewer_settings>  ## p_ds ... ultrasonic pulse transmission test data structure, channel 1 or 2, compression- or shear wave signals, <struct_test_utt>  ## p_cn ... channel number, <uint>    ## number of samples  nsmp = size(p_ds.d13.v, 1);    ## number of signals  nsig = size(p_ds.d13.v, 2);    ## maturity, plot title  mm = tool_get_maturity(p_ds, 0, 'min');    ## sample time signature, x axis  xx = tool_get_timesig(p_ds, 0, 'usec');    ## get upper sample index limits  ul = tool_get_mp4ulim(p_ds, 0, p_ss.mp4.ulim_nsig, p_ss.mp4.ulim_thf, p_ss.mp4.ulim_fltwinsize, p_ss.mp4.ulim_extsize);    ## print status  printf('Rendering frames: ');    ## create figure, hidden  fh = tool_create_figure(p_ss, [], 'hide');    ## render frames  for i = 1 : nsig    ## y coordinates, signal    yy = tool_get_magnitude(p_ds, 0, 'volts', i);    if (i == 1)      ## create axes object      ah = tool_create_axes(fh, p_ss, p_cn, 'axes', '2d');      ## create plot object      ph = tool_create_plot2d(ah, p_ss, p_cn, xx, yy);      ## axis labels      xlabel(p_ss.p2d.xlbl);      ylabel(p_ss.p2d.ylbl);      ## grid      if (p_ss.p2d.gridon)        grid on;      endif    else      ## update plot coordinates      tool_update_plot2d(ph, [], yy);    endif    ## update axis limits    ylim(ah, hlp_ylim(p_ss, yy));    xlim(ah, xx([p_ss.ptslen(p_cn), ul(i)]));    ## update plot title    tit = sprintf('%s: maturity = %d [min], index = %d', p_ss.temp.dscodeplt, mm(i), i);    title(ah, tit);    # write image    tmp_fn = fullfile(p_ss.mp4.tmpdir, sprintf('img%03d.png', i - 1));    imwrite(getframe(fh).cdata, tmp_fn);    ## print status    if (i < nsig)      printf('.');    else      printf('. (%d frames)\n', nsig);    endif  endfor    # close figure  close(fh);    # create MP4 file from images  hlp_create_mp4(p_ss);  endfunction